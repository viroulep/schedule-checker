{"version":3,"sources":["Navigation/utils.js","utils/index.js","wca/routes.js","wca/api.js","Navigation/Navigation.js","Settings/Settings.js","Pickers/Generic.js","GroupGeneration/ModalGenRandom.js","Simulation/TimesDetail.js","data/events.js","Pickers/Event.js","data/simu.js","Pickers/Model.js","Simulation/QuickOpt.js","Simulation/QuickSimu.js","Simulation/QuickRun.js","wca/persistence.js","Competitions/SyncIcon.js","UtilsComponents/LoadingError.js","UtilsComponents/LoadingPlaceholder.js","Competitions/IndexList.js","wca/wcif.js","Competitions/BestConfigurationSection.js","Competitions/Group.js","UtilsComponents/EventIcon.js","Competitions/Round.js","Competitions/Competition.js","Competitions/RemoteCompetition.js","Competitions/LocalCompetition.js","App.js","serviceWorker.js","index.js"],"names":["itemProps","active","className","cn","isPartiallyActive","isPartiallyCurrent","isExactlyActive","isCurrent","prefixed","url","process","integerDivision","x","y","result","Math","floor","remainder","timeToString","time","hour","join","setInt","e","set","def","parseInt","target","value","loadStoredConfig","simulator","saved","ls","mapSetup","setup","asObject","getSetupProps","mapModel","model","getModelProps","mapScrambling","scrambling","getScramblingProps","err","loadConfig","asMap","MapStringInt","ErrorKind","SUCCESS","console","error","errorMessage","storeConfig","conf","clearAndRefreshSettings","document","location","reload","clearAndRefresh","clear","window","overridenBaseUrl","REACT_APP_WCA_URL","isStaging","wcaUrl","baseUrl","path","apiUrl","competitionsUrl","getOauthToken","signIn","paramsAsString","origin","params","URLSearchParams","client_id","response_type","redirect_uri","scope","toString","Navigation","user","userLoading","Menu","pointing","secondary","to","getProps","Item","Icon","loading","name","Dropdown","item","text","simple","onClick","href","DropdownMenu","saveAction","hasChanges","onFileSelected","fileInput","useRef","icon","disabled","Divider","Header","current","click","type","ref","accept","style","display","onChange","ev","yamlDump","yaml","safeDump","blob","Blob","blobURL","URL","createObjectURL","tmp","createElement","setAttribute","body","appendChild","exportAsYaml","SettingsPanel","options","props","setProps","Form","Grid","doubling","textAlign","columns","Object","entries","map","k","data","Column","key","Input","inline","min","label","Popup","trigger","position","desc","v","newProps","updateInProps","loadStoredAndSet","setSetup","setModel","setScrambling","setSaved","newConfig","Settings","useState","useEffect","loadError","setLoadError","seHasChanges","_","isEqual","mHasChanges","scHasChanges","hasAnyChange","Message","color","negative","attached","event","reader","FileReader","onload","yamlString","asObj","safeLoad","message","importYamlString","onerror","readAsText","files","Segment","default","SettingsDescription","GenericPicker","val","setVal","FormAddRandom","generated","setGenerated","setMin","max","setMax","amount","setAmount","content","as","Button","size","Array","from","random","generateRandomArray","amountOptions","keys","n","FormAddOne","setTime","Generic","scrolling","ModalGenRandom","times","setTimes","OpenButton","headerContent","open","setOpenValue","setOpen","setClose","primary","Modal","centered","onClose","Content","length","basic","relaxed","vertical","Actions","Group","positive","Or","TimesDetail","compact","events","id","preferred_format","rank","byId","forEach","simulatedId","includes","push","official","filter","forSimulation","eventsForSimu","EventPicker","setEvent","availableModels","defaultModel","modelOptions","m","ModelPicker","QuickOpt","setMessage","maxStations","setMaxStations","maxStaff","setMaxStaff","Event","Model","timesVec","asVector","VectorTime","localOverride","optimizeStaff","Err","BestResult","Judges","Runners","Scramblers","strResult","strStaff","QuickSimu","simuGroup","Value","savedTimes","QuickRunPage","array","defaultData","lastFetched","setRemoteIfNeeded","search","has","usePersistence","kind","loadedData","setData","setLoading","setError","sync","useCallback","fetchOptions","oauthToken","Promise","Error","fetch","headers","Headers","Authorization","then","response","ok","statusText","json","wcaApiFetch","loaded","Date","now","catch","finally","storedData","SyncIcon","syncIcon","link","toLocaleString","wide","LoadingError","LoadingPlaceholder","Dimmer","inverted","Loader","Placeholder","Line","Competitions","competitions","fluid","comp","announced_at","manageByMeParams","managed_by_me","start","toISOString","IndexList","parseActivityCode","activityCode","match","r","g","a","o","eventId","roundNumber","groupNumber","attemptNumber","otherActivity","getRoundData","roundId","find","rounds","localConfigFromActivity","compWcif","cutoff","timeLimit","configOverride","centiseconds","time_limit","attemptResult","BestConfigSection","activity","selectedModel","bestConfig","setBestConfig","circular","computeBestConfig","competitorsToTimes","competitors","pbMap","person","noPb","worst","t","undefined","i","secondsForRange","startTime","endTime","getTime","index","groupsById","accuracyArray","setAccuracyArray","simulated","setSimulated","computeSimulatedTime","estimate","absoluteDiff","abs","relativeDiff","round","newAcc","updateAccuracyArray","isEmpty","advancementCondition","level","currentRoundCode","totalGroups","groupsForFirstRound","schedule","venues","rooms","activities","startsWith","childActivities","ca","timesForFirstRound","sortBy","flatMap","groupId","totalQualified","baseGroupSize","baseIndex","endIndex","slice","populateGroupWithTimes","List","horizontal","EventIcon","Round","every","some","settingsToDisplay","SettingsInfo","setupSettings","setSelectedModel","Row","s","Field","Competition","setPbMap","setGroups","onlySimulated","setOnlySimulated","judges","scramblers","runners","allRoomsOptions","venue","room","setRoom","allActivities","roomId","sortedActivities","Events","groupBy","d","getFullYear","getMonth","getDate","getAllActivities","wcif","setGroupMap","persons","p","registrantId","pbs","personalBests","pb","best","assignments","assignmentCode","activityId","buildIndex","defaultVenue","defaultRoom","stackable","selection","Checkbox","toggle","checked","width","toDateString","RemoteCompetition","competitionId","LocalCompetition","setWcif","JSON","parse","loadWcif","labelPosition","LoadingMessage","FailureMessage","LoadingWasm","Home","NotFound","children","App","setSimulator","simuLoading","setSimuLoading","storedUser","storedMe","me","currentUser","staging","token","clearForNewUser","loadWasm","wasm","getSimu","setTimeout","Container","basepath","Boolean","hostname","hash","replace","hashParams","get","stored","getOauthTokenIfAny","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.17438ae8.chunk.js","sourcesContent":["import cn from 'classnames';\n\nconst itemProps = (active) => ({\n  className: cn('item', { active }),\n});\n\nexport const isPartiallyActive = ({\n  isPartiallyCurrent,\n}) => itemProps(isPartiallyCurrent);\n\nexport const isExactlyActive = ({\n  isCurrent,\n}) => itemProps(isCurrent);\n\nexport const prefixed = (url) => `${process.env.PUBLIC_URL}${url}`;\n","import ls from 'local-storage';\nimport { asMap, asObject } from '@viroulep/group-simulator';\nimport { prefixed } from '../Navigation/utils';\n\nconst SECS_IN_MINUTE = 60;\nconst SECS_IN_HOUR = 60 * SECS_IN_MINUTE;\n\nconst integerDivision = (x, y) => ({\n  result: Math.floor(x / y),\n  remainder: x % y,\n});\n\nexport const timeToString = (time) => {\n  let { result, remainder } = integerDivision(time, SECS_IN_HOUR);\n  const hour = result;\n  ({ result, remainder } = integerDivision(remainder, SECS_IN_MINUTE));\n  const hourStr = hour > 0 ? `${hour} hours` : '';\n  const minStr = result > 0 ? `${result} minutes` : '';\n  const secStr = `${remainder} seconds`;\n  return [hourStr, minStr, secStr].join(' ');\n};\n\nexport const setInt = (e, set, def) => set(parseInt(e.target.value, 10) || def);\n\nexport const loadStoredConfig = (simulator) => {\n  if (!simulator) {\n    return {};\n  }\n  const saved = ls('config') || {};\n  const mapSetup = saved.setup || asObject(simulator.getSetupProps());\n  const mapModel = saved.model || asObject(simulator.getModelProps());\n  const mapScrambling = saved.scrambling || asObject(simulator.getScramblingProps());\n  const err = simulator.loadConfig(\n    asMap(simulator.MapStringInt, mapSetup),\n    asMap(simulator.MapStringInt, mapModel),\n    asMap(simulator.MapStringInt, mapScrambling),\n  );\n  if (err !== simulator.ErrorKind.SUCCESS) {\n    /* eslint-disable-next-line */\n    console.error(`Could not load local config: ${simulator.errorMessage(err)}`);\n    return {\n      mapSetup: asObject(simulator.getSetupProps()),\n      mapModel: asObject(simulator.getModelProps()),\n      mapScrambling: asObject(simulator.getScramblingProps()),\n    }\n  }\n\n  return { mapSetup, mapModel, mapScrambling };\n};\n\nexport const storeConfig = (conf) => ls('config', conf);\n\nexport const clearAndRefreshSettings = () => {\n  ls('config', {});\n  document.location.reload();\n};\n\nexport const clearAndRefresh = () => {\n  ls.clear();\n  window.location = prefixed('/');\n};\n","import ls from 'local-storage';\n\nconst prodBaseUrl = 'https://www.worldcubeassociation.org';\nconst stagingBaseUrl = 'https://staging.worldcubeassociation.org';\nconst overridenBaseUrl = process.env.REACT_APP_WCA_URL;\n\nexport const isStaging = () => overridenBaseUrl || ls('staging');\n\nconst wcaUrl = () => (overridenBaseUrl || (isStaging() ? stagingBaseUrl : prodBaseUrl));\n\nexport const getOauthClientId = () => (isStaging() ? 'example-application-id' : '3A9BGEPZcmf7CA1D77meVRMzFGT-CZq6-6oXyPgelMU');\n\nexport const baseUrl = (path = '') => `${wcaUrl()}${path}`;\n\nexport const oauthUrl = (paramsAsString) => baseUrl(`/oauth/authorize?${paramsAsString}`);\n\nexport const apiUrl = (path) => baseUrl(`/api/v0${path}`);\nexport const selfUrl = () => apiUrl('/me');\nexport const competitionsUrl = (path) => apiUrl(`/competitions${path}`);\nexport const competitionWcifUrl = (id) => competitionsUrl(`/${id}/wcif`);\n","import ls from 'local-storage';\nimport {\n  getOauthClientId,\n  oauthUrl,\n} from './routes';\n\n// For now, this is only some internal details\nconst getOauthToken = () => ls('token') || '';\n\nexport const setOauthToken = (token) => ls('token', token);\n\nexport const wcaApiFetch = (url, fetchOptions = {}) => {\n  const oauthToken = getOauthToken();\n  if (oauthToken.length === 0) {\n    // No point in even trying!\n    return new Promise(() => {\n      throw new Error('Oauth token empty, please log in.');\n    });\n  }\n  return fetch(url,\n    {\n      ...fetchOptions,\n      headers: new Headers({\n        Authorization: `Bearer ${oauthToken}`,\n        'Content-Type': 'application/json',\n      }),\n    })\n    .then((response) => {\n      if (!response.ok) throw new Error(response.statusText);\n      return response;\n    })\n    .then((response) => response.json());\n};\n\nexport const signIn = () => {\n  const { origin } = window.location;\n  const params = new URLSearchParams({\n    client_id: getOauthClientId(),\n    response_type: 'token',\n    redirect_uri: `${origin}${process.env.PUBLIC_URL}`,\n    scope: 'public manage_competitions',\n  });\n  window.location = oauthUrl(params.toString());\n};\n","import React from 'react';\nimport {\n  Menu, Dropdown, Item, Icon,\n} from 'semantic-ui-react';\nimport { Link } from '@reach/router';\nimport {\n  isPartiallyActive, isExactlyActive, prefixed,\n} from './utils';\nimport { clearAndRefresh } from '../utils';\nimport { signIn } from '../wca/api';\n\n/* eslint-disable jsx-a11y/anchor-is-valid */\nconst Navigation = ({\n  user,\n  userLoading,\n}) => (\n  <Menu pointing secondary>\n    <Link to={prefixed('/')} getProps={isExactlyActive}>\n      Home\n    </Link>\n    <Link to={prefixed('/settings')} getProps={isPartiallyActive}>\n      Settings\n    </Link>\n    <Link to={prefixed('/quick-simu')} getProps={isPartiallyActive}>\n      Quick simulation\n    </Link>\n    <Link to={prefixed('/from-wcif')} getProps={isExactlyActive}>\n      Check WCIF\n    </Link>\n    {user && (\n      <Link to={prefixed('/competitions')} getProps={isPartiallyActive}>\n        My competitions\n      </Link>\n    )}\n    {userLoading && (\n      <Item className=\"right\">\n        <Icon loading name=\"spinner\" />\n      </Item>\n    )}\n    {user && (\n      <Dropdown item text={user.name} className=\"right\" simple>\n        <Dropdown.Menu>\n          <Dropdown.Item onClick={clearAndRefresh}>\n            Sign out\n          </Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    )}\n    {!user && !userLoading && (\n      <a href=\"#\" className=\"item right\" onClick={signIn}>\n        Sign in with the WCA\n      </a>\n    )}\n  </Menu>\n);\n\nexport default Navigation;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Link, Router } from '@reach/router';\nimport {\n  Grid,\n  Header,\n  Form,\n  Dropdown,\n  Segment,\n  Message,\n  Menu,\n  Popup,\n} from 'semantic-ui-react';\nimport _ from 'lodash';\nimport { asMap, SettingsDescription } from '@viroulep/group-simulator';\nimport yaml from 'js-yaml';\n\nimport {\n  isPartiallyActive, isExactlyActive,\n} from '../Navigation/utils';\nimport './Settings.scss';\nimport { storeConfig, loadStoredConfig, clearAndRefreshSettings } from '../utils';\n\nconst exportAsYaml = (simulator) => {\n  const { mapSetup, mapModel, mapScrambling } = loadStoredConfig(simulator);\n  const yamlDump = yaml.safeDump({\n    setup: mapSetup,\n    model: mapModel,\n    scrambling: mapScrambling,\n  });\n  const blob = new Blob([yamlDump], {\n    type: 'application/x-yaml',\n  });\n  const blobURL = window.URL.createObjectURL(blob);\n  const tmp = document.createElement('a');\n  tmp.href = blobURL;\n  tmp.setAttribute('download', 'simulator-settings.yml');\n  document.body.appendChild(tmp);\n  tmp.click();\n};\n\nconst DropdownMenu = ({\n  saveAction,\n  hasChanges,\n  simulator,\n  onFileSelected,\n}) => {\n  const fileInput = useRef(null);\n  return (\n    <Dropdown item icon=\"cogs\" className=\"right\">\n      <Dropdown.Menu>\n        <Dropdown.Item\n          onClick={saveAction}\n          disabled={!hasChanges}\n        >\n          Save settings\n        </Dropdown.Item>\n        <Dropdown.Item onClick={clearAndRefreshSettings}>Reset settings to default</Dropdown.Item>\n        <Dropdown.Divider />\n        <Dropdown.Header>Settings as YAML</Dropdown.Header>\n        <Dropdown.Item onClick={() => fileInput.current.click()}>\n          Import\n          <input\n            type=\"file\"\n            ref={fileInput}\n            accept=\".yml,.yaml\"\n            style={{ display: 'none' }}\n            onChange={(ev) => onFileSelected(ev, fileInput)}\n          />\n        </Dropdown.Item>\n        <Dropdown.Item onClick={() => exportAsYaml(simulator)}>Export</Dropdown.Item>\n      </Dropdown.Menu>\n    </Dropdown>\n  )\n};\n\nconst SettingsPanel = ({\n  options,\n  props,\n  setProps,\n}) => {\n  const updateInProps = (k, v) => {\n    const newProps = {\n      ...props,\n    };\n    // NaN evaluates as false, so if NaN take 0\n    newProps[k] = parseInt(v, 10) || 0;\n    setProps(newProps);\n  };\n\n  return (\n    <Form className=\"settings-form\">\n      <Grid doubling textAlign=\"right\" columns={3}>\n        {Object.entries(options).map(([k, data]) => (\n          <Grid.Column key={k}>\n            <Form.Input\n              inline\n              min={0}\n              type=\"number\"\n              label={(\n                <Popup\n                  /* eslint-disable-next-line */\n                  trigger={<label>{data.text}</label>}\n                  position=\"left center\"\n                >\n                  {data.desc}\n                </Popup>\n              )}\n              value={props[k] || 0}\n              onChange={(e) => updateInProps(k, e.target.value)}\n            />\n          </Grid.Column>\n        ))}\n      </Grid>\n    </Form>\n  );\n};\n\nconst loadStoredAndSet = (\n  simulator, setSetup, setModel, setScrambling, setSaved,\n) => {\n  const { mapSetup, mapModel, mapScrambling } = loadStoredConfig(simulator);\n  setSetup(mapSetup);\n  setModel(mapModel);\n  setScrambling(mapScrambling);\n  const newConfig = {\n    setup: mapSetup,\n    model: mapModel,\n    scrambling: mapScrambling,\n  };\n  setSaved(newConfig);\n  storeConfig(newConfig);\n};\n\nconst loadConfig = (\n  simulator, setup, model, scrambling,\n  setSetup, setModel, setScrambling, setSaved,\n) => {\n  // We let the simulator handle the validation, therefore we:\n  //   - clear the stored data\n  //   - load the submitted config\n  //   - load the stored config (which will return the - sanitized - config\n  //   set in the simulator)\n  //   - set the saved config.\n  storeConfig({});\n  simulator.loadConfig(\n    asMap(simulator.MapStringInt, setup),\n    asMap(simulator.MapStringInt, model),\n    asMap(simulator.MapStringInt, scrambling),\n  );\n  loadStoredAndSet(simulator, setSetup, setModel, setScrambling, setSaved);\n};\n\nconst Settings = ({\n  simulator,\n}) => {\n  const [setup, setSetup] = useState({});\n  const [model, setModel] = useState({});\n  const [scrambling, setScrambling] = useState({});\n  const [saved, setSaved] = useState({});\n\n  useEffect(() => {\n    loadStoredAndSet(\n      simulator, setSetup, setModel, setScrambling, setSaved,\n    );\n  }, [simulator, setSetup, setModel, setScrambling, setSaved]);\n\n  const saveAction = () => {\n    loadConfig(\n      simulator, setup, model, scrambling,\n      setSetup, setModel, setScrambling, setSaved,\n    );\n  }\n\n  const [loadError, setLoadError] = useState(null);\n  const loadFromYaml = (event, fileInput) => {\n    setLoadError(null);\n    const importYamlString = (yamlString) => {\n      try {\n        const asObj = yaml.safeLoad(yamlString);\n        const newConfig = {\n          setup: {},\n          model: {},\n          scrambling: {},\n          ...asObj,\n        };\n        loadConfig(\n          simulator, newConfig.setup, newConfig.model, newConfig.scrambling,\n          setSetup, setModel, setScrambling, setSaved,\n        );\n      } catch (error) {\n        setLoadError(error.message);\n      }\n    }\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      importYamlString(e.target.result)\n      // Clear the input so that we can re-upload the same file!\n      /* eslint-disable no-param-reassign */\n      fileInput.current.value = ''\n    };\n    reader.onerror = (e) => setLoadError(`Couldn't load the YAML file (${e})`);\n    reader.readAsText(event.target.files[0]);\n  };\n\n  const seHasChanges = !_.isEqual(saved.setup, setup);\n  const mHasChanges = !_.isEqual(saved.model, model);\n  const scHasChanges = !_.isEqual(saved.scrambling, scrambling);\n  const hasAnyChange = seHasChanges || mHasChanges || scHasChanges;\n\n  /* eslint-disable jsx-a11y/anchor-is-valid */\n  return (\n    <div>\n      <Header>\n        Simulator settings\n      </Header>\n      <Message color=\"violet\">\n        All values are unsigned integers.\n        <br />\n        All times are expressed in seconds.\n      </Message>\n      {loadError && (\n        <Message negative>\n          Error while loading the settings:\n          <pre>{loadError}</pre>\n        </Message>\n      )}\n      <Menu attached=\"top\" pointing color=\"violet\">\n        <Link to=\"\" getProps={isExactlyActive}>\n          Setup\n          {' '}\n          {seHasChanges ? '*' : ''}\n        </Link>\n        <Link to=\"model\" getProps={isPartiallyActive}>\n          Model parameters\n          {' '}\n          {mHasChanges ? '*' : ''}\n        </Link>\n        <Link to=\"scrambling\" getProps={isPartiallyActive}>\n          Scrambling costs\n          {' '}\n          {scHasChanges ? '*' : ''}\n        </Link>\n        <DropdownMenu\n          simulator={simulator}\n          saveAction={saveAction}\n          hasChanges={hasAnyChange}\n          onFileSelected={loadFromYaml}\n        />\n      </Menu>\n      <Segment attached=\"bottom\">\n        <Router>\n          <SettingsPanel\n            path=\"/\"\n            default\n            simulator={simulator}\n            options={SettingsDescription.setup}\n            props={setup}\n            setProps={setSetup}\n          />\n          <SettingsPanel\n            path=\"/model\"\n            simulator={simulator}\n            options={SettingsDescription.model}\n            props={model}\n            setProps={setModel}\n          />\n          <SettingsPanel\n            path=\"/scrambling\"\n            simulator={simulator}\n            options={SettingsDescription.scrambling}\n            props={scrambling}\n            setProps={setScrambling}\n          />\n        </Router>\n      </Segment>\n    </div>\n  )\n};\n\nexport default Settings;\n","import React from 'react';\nimport { Dropdown } from 'semantic-ui-react';\n\n/* eslint-disable react/jsx-props-no-spreading */\nconst GenericPicker = ({\n  val,\n  setVal,\n  options,\n  ...props\n}) => (\n  <Dropdown\n    {...props}\n    value={val}\n    onChange={(e, { value }) => setVal(value)}\n    options={options}\n  />\n);\n\nexport default GenericPicker;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Segment, Divider, Header, Form, Button, Modal, Grid,\n} from 'semantic-ui-react';\nimport _ from 'lodash';\n\nimport { setInt } from '../utils';\nimport GenericPicker from '../Pickers/Generic';\n\nconst generateRandomArray = (min, max, size) => Array.from(Array(size))\n  .map(() => Math.floor(Math.random() * (max - min + 1)) + min);\n\nconst DEFAULT_MIN = 10;\nconst DEFAULT_MAX = 15;\n\nconst FormAddRandom = ({\n  generated,\n  setGenerated,\n}) => {\n  const [min, setMin] = useState(DEFAULT_MIN);\n  const [max, setMax] = useState(DEFAULT_MAX);\n  const [amount, setAmount] = useState(10);\n  const error = min > max ? {\n    content: 'Max must be greater than min',\n  } : null;\n\n  const generateAndAppend = () => setGenerated([\n    ...generated,\n    ...generateRandomArray(min, max, amount),\n  ]);\n\n  useEffect(() => {\n    setMin(_.min(generated) || DEFAULT_MIN);\n    setMax(_.max(generated) || DEFAULT_MAX);\n  }, [generated]);\n\n  return (\n    <>\n      <Header as=\"h4\" textAlign=\"center\">\n        Generate random times\n      </Header>\n      <p>\n        The form below let you add some randomly generated number within\n        {' '}\n        <em>min</em>\n        {' '}\n        and\n        {' '}\n        <em>max</em>\n        .\n      </p>\n      <Form>\n        <Form.Input\n          inline\n          min={1}\n          type=\"number\"\n          label=\"Min\"\n          value={min}\n          onChange={(e) => setInt(e, setMin, min)}\n        />\n        <Form.Input\n          inline\n          min={1}\n          type=\"number\"\n          label=\"Max\"\n          value={max}\n          error={error}\n          onChange={(e) => setInt(e, setMax, max)}\n        />\n        <Form.Input\n          inline\n          min={1}\n          type=\"number\"\n          label=\"Amount\"\n          value={amount}\n          onChange={(e) => setInt(e, setAmount, amount)}\n        />\n        <Button\n          color=\"violet\"\n          disabled={!!error}\n          content=\"Generate and append\"\n          onClick={generateAndAppend}\n        />\n      </Form>\n    </>\n  )\n};\n\nconst amountOptions = Array.from(Array(10).keys()).map((n) => ({\n  text: n + 1,\n  key: n + 1,\n  value: n + 1,\n}));\n\nconst FormAddOne = ({\n  generated,\n  setGenerated,\n}) => {\n  const [time, setTime] = useState(_.max(generated) || DEFAULT_MAX);\n  const [amount, setAmount] = useState(1);\n  const generateAndAppend = () => setGenerated([\n    ...generated,\n    ...Array.from(Array(amount)).map(() => time),\n  ]);\n  return (\n    <>\n      <Header as=\"h4\" textAlign=\"center\">\n        Add specific time(s)\n      </Header>\n      <p>\n        You can add a specific time one or more time by using the form below.\n      </p>\n      <Form className=\"mb-2\">\n        <Form.Input\n          inline\n          min={1}\n          type=\"number\"\n          label=\"Time\"\n          value={time}\n          onChange={(e) => setInt(e, setTime, time)}\n        />\n      </Form>\n      <div className=\"mb-2\">\n        I want to add this value\n        {' '}\n        <GenericPicker\n          inline\n          scrolling\n          val={amount}\n          setVal={setAmount}\n          options={amountOptions}\n        />\n        {' '}\n        times.\n      </div>\n      <Button\n        color=\"violet\"\n        content=\"Append\"\n        onClick={generateAndAppend}\n      />\n    </>\n  );\n};\n\nconst ModalGenRandom = ({\n  times,\n  setTimes,\n  OpenButton,\n  headerContent,\n}) => {\n  const [open, setOpenValue] = useState(false);\n  const [generated, setGenerated] = useState([]);\n\n  const setOpen = () => setOpenValue(true);\n  const setClose = () => setOpenValue(false);\n\n  useEffect(() => {\n    setGenerated(times);\n  }, [times, open]);\n\n  return (\n    <>\n      {OpenButton ? (\n        <OpenButton onClick={setOpen} />\n      ) : (\n        <Button primary onClick={setOpen}>Generate group</Button>\n      )}\n      <Modal open={open} centered={false} onClose={setClose}>\n        <Modal.Header>\n          {headerContent ? (\n            <>{headerContent}</>\n          ) : (\n            <>Generate competitors for group</>\n          )}\n        </Modal.Header>\n        <Modal.Content>\n          <p>\n            Use this form to generate a population for the group.\n            Each number represents the average time of one competitor,\n            therefore if you want 20 competitors in the group you need to\n            generate 20 numbers.\n          </p>\n          <p>\n            There are\n            {' '}\n            {generated.length}\n            {' '}\n            competitors in the group currently:\n            <br />\n            <code>\n              {generated.join(', ')}\n            </code>\n          </p>\n          <Segment basic>\n            <Grid columns={2} relaxed=\"very\" className=\"mb-2\">\n              <Grid.Column>\n                <FormAddRandom generated={generated} setGenerated={setGenerated} />\n              </Grid.Column>\n              <Grid.Column>\n                <FormAddOne generated={generated} setGenerated={setGenerated} />\n              </Grid.Column>\n            </Grid>\n            <Divider vertical>Or</Divider>\n          </Segment>\n          <Button\n            basic\n            negative\n            content=\"Clear times\"\n            onClick={() => setGenerated([])}\n          />\n        </Modal.Content>\n        <Modal.Actions>\n          <Button.Group>\n            <Button\n              positive\n              onClick={() => { setTimes(generated); setClose(); }}\n              content=\"Save\"\n            />\n            <Button.Or />\n            <Button color=\"black\" onClick={setClose} content=\"Discard\" />\n          </Button.Group>\n        </Modal.Actions>\n      </Modal>\n    </>\n  );\n};\n\nexport default ModalGenRandom;\n","import React, { useState } from 'react';\nimport {\n  Button, Segment,\n} from 'semantic-ui-react';\nimport ModalGenRandom from '../GroupGeneration/ModalGenRandom';\n\nconst TimesDetail = ({\n  times,\n  setTimes,\n}) => {\n  const [open, setOpen] = useState(false);\n  const OpenButton = ({ onClick }) => (\n    <Button\n      color=\"violet\"\n      content=\"Set group times\"\n      onClick={onClick}\n      compact\n    />\n  );\n\n  return (\n    <div className=\"times-details\">\n      <ModalGenRandom\n        times={times}\n        setTimes={setTimes}\n        OpenButton={OpenButton}\n      />\n      <Button onClick={() => setOpen(!open)} compact>\n        {open ? (\n          <>Hide details.</>\n        ) : (\n          <>Show average times.</>\n        )}\n      </Button>\n      {open && (\n        <Segment>\n          <code>\n            {times.join(', ')}\n          </code>\n        </Segment>\n      )}\n    </div>\n  );\n};\n\nexport default TimesDetail;\n","const events = [\n  {\n    id: '333',\n    name: '3x3x3 Cube',\n    preferred_format: 'a',\n    rank: 10,\n  },\n  {\n    id: '222',\n    name: '2x2x2 Cube',\n    preferred_format: 'a',\n    rank: 20,\n  },\n  {\n    id: '444',\n    name: '4x4x4 Cube',\n    preferred_format: 'a',\n    rank: 30,\n  },\n  {\n    id: '555',\n    name: '5x5x5 Cube',\n    preferred_format: 'a',\n    rank: 40,\n  },\n  {\n    id: '666',\n    name: '6x6x6 Cube',\n    preferred_format: 'm',\n    rank: 50,\n  },\n  {\n    id: '777',\n    name: '7x7x7 Cube',\n    preferred_format: 'm',\n    rank: 60,\n  },\n  {\n    id: '333bf',\n    name: '3x3x3 Blindfolded',\n    preferred_format: '3',\n    rank: 70,\n  },\n  {\n    id: '333fm',\n    name: '3x3x3 Fewest Moves',\n    preferred_format: 'm',\n    rank: 80,\n  },\n  {\n    id: '333oh',\n    name: '3x3x3 One-Handed',\n    preferred_format: 'a',\n    rank: 90,\n  },\n  {\n    id: 'clock',\n    name: 'Clock',\n    preferred_format: 'a',\n    rank: 110,\n  },\n  {\n    id: 'minx',\n    name: 'Megaminx',\n    preferred_format: 'a',\n    rank: 120,\n  },\n  {\n    id: 'pyram',\n    name: 'Pyraminx',\n    preferred_format: 'a',\n    rank: 130,\n  },\n  {\n    id: 'skewb',\n    name: 'Skewb',\n    preferred_format: 'a',\n    rank: 140,\n  },\n  {\n    id: 'sq1',\n    name: 'Square-1',\n    preferred_format: 'a',\n    rank: 150,\n  },\n  {\n    id: '444bf',\n    name: '4x4x4 Blindfolded',\n    preferred_format: '3',\n    rank: 160,\n  },\n  {\n    id: '555bf',\n    name: '5x5x5 Blindfolded',\n    preferred_format: '3',\n    rank: 170,\n  },\n  {\n    id: '333mbf',\n    name: '3x3x3 Multi-Blind',\n    preferred_format: '3',\n    rank: 180,\n  },\n  {\n    id: '333ft',\n    name: '3x3x3 With Feet',\n    preferred_format: 'a',\n    rank: 996,\n  },\n  {\n    id: 'magic',\n    name: 'Magic',\n    preferred_format: 'a',\n    rank: 997,\n  },\n  {\n    id: 'mmagic',\n    name: 'Master Magic',\n    preferred_format: 'a',\n    rank: 998,\n  },\n  {\n    id: '333mbo',\n    name: '3x3x3 Multi-Blind Old Style',\n    preferred_format: '3',\n    rank: 999,\n  },\n];\n\nconst byId = {};\n\nevents.forEach((e) => { byId[e.id] = e; });\n\nconst simulatedId = [];\n\nevents.forEach((e) => {\n  if (e.rank < 900 && !['333fm', '333mbf'].includes(e.id)) {\n    simulatedId.push(e.id);\n  }\n});\n\nexport default {\n  official: events.filter((e) => e.rank < 900),\n  forSimulation: events.filter((e) => simulatedId.includes(e.id)),\n  byId,\n  simulatedId,\n};\n","import React from 'react';\n\nimport GenericPicker from './Generic';\nimport events from '../data/events';\n\nconst eventsForSimu = events.forSimulation.map((e) => ({\n  text: e.name,\n  key: e.id,\n  value: e.id,\n}));\n\n/* eslint-disable react/jsx-props-no-spreading */\nconst EventPicker = ({\n  event,\n  setEvent,\n  ...props\n}) => (\n  <GenericPicker\n    {...props}\n    val={event}\n    setVal={setEvent}\n    options={eventsForSimu}\n  />\n);\n\nexport default EventPicker;\n","export const availableModels = ['Runners', 'JudgesRun'];\nexport const defaultModel = availableModels[0];\nexport const defaultEvent = '333';\n","import React from 'react';\n\nimport { availableModels } from '../data/simu';\nimport GenericPicker from './Generic';\n\nconst modelOptions = availableModels.map((m) => ({\n  text: m,\n  key: m,\n  value: m,\n}));\n\n/* eslint-disable react/jsx-props-no-spreading */\nconst ModelPicker = ({\n  model,\n  setModel,\n  ...props\n}) => (\n  <GenericPicker\n    {...props}\n    val={model}\n    setVal={setModel}\n    options={modelOptions}\n  />\n);\n\nexport default ModelPicker;\n","import React, { useState } from 'react';\nimport {\n  Button, Header, Input,\n} from 'semantic-ui-react';\nimport { asVector } from '@viroulep/group-simulator';\nimport EventPicker from '../Pickers/Event';\nimport ModelPicker from '../Pickers/Model';\nimport { timeToString, setInt } from '../utils';\nimport { defaultModel, defaultEvent } from '../data/simu';\n\nconst QuickOpt = ({\n  simulator,\n  times,\n}) => {\n  const [event, setEvent] = useState(defaultEvent);\n  const [model, setModel] = useState(defaultModel);\n  const [message, setMessage] = useState('');\n  const [maxStations, setMaxStations] = useState(10);\n  const [maxStaff, setMaxStaff] = useState(14);\n\n  const runSimulation = () => {\n    const timesVec = asVector(simulator.VectorTime, times);\n    // We'll just use the default config with no override!\n    const localOverride = new simulator.MapStringInt();\n    const {\n      Err, BestResult, Judges, Runners, Scramblers,\n    } = simulator.optimizeStaff(\n      event, timesVec, maxStations, maxStaff, localOverride, model,\n    );\n    if (Err !== simulator.ErrorKind.SUCCESS) {\n      setMessage(\n        `An error occurred during the simulation: ${simulator.errorMessage(Err)}`,\n      );\n    } else {\n      const strResult = `The best group took ${timeToString(BestResult)},`;\n      const strStaff = `using ${Judges} judges, ${Scramblers} scramblers, and ${Runners} runners. `;\n      setMessage(`${strResult} ${strStaff}`);\n    }\n  };\n\n  return (\n    <>\n      <Header>\n        Quick staff optimizer\n      </Header>\n      <div className=\"opt-content\">\n        <div className=\"inputs\">\n          <Input\n            min={3}\n            type=\"number\"\n            label=\"Total staff\"\n            value={maxStaff}\n            onChange={(e) => setInt(e, setMaxStaff, maxStaff)}\n          />\n          <Input\n            min={1}\n            type=\"number\"\n            label=\"Stations\"\n            value={maxStations}\n            onChange={(e) => setInt(e, setMaxStations, maxStations)}\n          />\n        </div>\n        <p>\n          Given I have\n          {' '}\n          {maxStaff}\n          {' '}\n          staff and at most\n          {' '}\n          {maxStations}\n          {' '}\n          stations available, I want to get the shortest time for this group.\n        </p>\n        <div>\n          This group is for\n          {' '}\n          <EventPicker event={event} setEvent={setEvent} inline scrolling />\n          {' '}\n          and my staff will be using the\n          {' '}\n          <ModelPicker model={model} setModel={setModel} inline />\n          {' '}\n          system throughout the group.\n        </div>\n      </div>\n      <Button\n        primary\n        className=\"run-simu\"\n        content=\"Run it!\"\n        onClick={runSimulation}\n      />\n      <p>\n        {message}\n      </p>\n    </>\n  );\n};\n\nexport default QuickOpt;\n","import React, { useState } from 'react';\nimport {\n  Button, Header, Message,\n} from 'semantic-ui-react';\nimport { asVector } from '@viroulep/group-simulator';\nimport EventPicker from '../Pickers/Event';\nimport ModelPicker from '../Pickers/Model';\nimport { timeToString } from '../utils';\nimport { defaultModel, defaultEvent } from '../data/simu';\n\nconst QuickSimu = ({\n  simulator,\n  times,\n}) => {\n  const [event, setEvent] = useState(defaultEvent);\n  const [model, setModel] = useState(defaultModel);\n  const [message, setMessage] = useState('');\n\n  const runSimulation = () => {\n    const timesVec = asVector(simulator.VectorTime, times);\n    // We'll just use the default config with no override!\n    const localOverride = new simulator.MapStringInt();\n    const { Err, Value } = simulator.simuGroup(event, timesVec, localOverride, model);\n    if (Err !== simulator.ErrorKind.SUCCESS) {\n      setMessage(\n        `An error occurred during the simulation: ${simulator.errorMessage(Err)}`,\n      );\n    } else {\n      setMessage(`The group took ${timeToString(Value)}.`);\n    }\n  };\n\n  return (\n    <>\n      <Header>\n        Quick group simulation\n      </Header>\n      <Message\n        compact\n        color=\"brown\"\n      >\n        You can adjust the number of judges/scramblers/runners,\n        as well as the miscramble or extra rate in the settings.\n      </Message>\n      <div>\n        I want to simulate this group for\n        {' '}\n        <EventPicker event={event} setEvent={setEvent} inline scrolling />\n        {' '}\n        and my staff will be using the\n        {' '}\n        <ModelPicker model={model} setModel={setModel} inline />\n        {' '}\n        system throughout the group.\n      </div>\n      <Button\n        primary\n        className=\"run-simu\"\n        content=\"Run it!\"\n        onClick={runSimulation}\n      />\n      <p>\n        {message}\n      </p>\n    </>\n  );\n};\n\nexport default QuickSimu;\n","import React, { useState } from 'react';\nimport {\n  Header,\n} from 'semantic-ui-react';\nimport TimesDetail from './TimesDetail';\nimport QuickOpt from './QuickOpt';\nimport QuickSimu from './QuickSimu';\nimport './QuickRun.scss';\n\n// Poor man's database\nlet savedTimes = [];\n\nconst QuickRunPage = ({\n  simulator,\n}) => {\n  const [times, setTimes] = useState(savedTimes);\n  const setPersistedTimes = (array) => {\n    savedTimes = array;\n    setTimes(array);\n  };\n\n  return (\n    <>\n      <Header>\n        Group setup\n      </Header>\n      <div>\n        There are currently\n        {' '}\n        {times.length}\n        {' '}\n        competitors in the group.\n        <TimesDetail times={times} setTimes={setPersistedTimes} />\n      </div>\n      <QuickSimu simulator={simulator} times={times} />\n      <QuickOpt simulator={simulator} times={times} />\n    </>\n  );\n};\n\nexport default QuickRunPage;\n","import { useState, useEffect, useCallback } from 'react';\nimport ls from 'local-storage';\n\nimport { setOauthToken, wcaApiFetch } from './api';\nimport { isStaging } from './routes';\n\nconst defaultData = {\n  data: null,\n  lastFetched: null,\n};\n\nexport const clearForNewUser = () => {\n  const staging = ls('staging');\n  const token = ls('token');\n  const currentUser = ls('currentUser');\n  ls.clear();\n  ls('currentUser', currentUser);\n  ls('token', token);\n  ls('staging', staging);\n};\n\nexport const getOauthTokenIfAny = () => {\n  // Try getting it from the url, if we're redirected from the WCA website.\n  const hash = window.location.hash.replace(/^#/, '');\n  const hashParams = new URLSearchParams(hash);\n  if (hashParams.has('access_token')) {\n    window.location.hash = '';\n    setOauthToken(hashParams.get('access_token'));\n    const stored = ls('currentUser');\n    if (stored) {\n      // We had a user!\n      // It may be us, so just reset the lastFetched date to force a sync.\n      stored.lastFetched = null;\n      ls('currentUser', stored);\n    }\n  }\n};\n\nexport const setStaging = () => {\n  ls.clear();\n  ls('staging', true);\n  document.location.reload();\n};\n\nexport const setProd = () => {\n  ls.clear();\n  ls('staging', false);\n  document.location.reload();\n};\n\nexport const setRemoteIfNeeded = () => {\n  const params = new URLSearchParams(window.location.search);\n  if (params.has('staging') && !isStaging()) {\n    setStaging();\n  }\n  if (params.has('prod') && isStaging()) {\n    setProd();\n  }\n};\n\n/* eslint-disable import/prefer-default-export */\nexport const usePersistence = (kind, url) => {\n  const [loadedData, setData] = useState({\n    ...defaultData,\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const sync = useCallback(() => {\n    setLoading(true);\n    setError(null);\n    wcaApiFetch(url).then((loaded) => {\n      const data = {\n        data: loaded,\n        lastFetched: Date.now(),\n      };\n      setData(data);\n      ls(kind, data);\n    }).catch((err) => {\n      setError(err.message);\n    }).finally(() => setLoading(false));\n  }, [kind, url, setData, setError]);\n\n  useEffect(() => {\n    const storedData = ls(kind) || {\n      ...defaultData,\n    };\n    if (!storedData.lastFetched) {\n      sync();\n    } else {\n      setData(storedData);\n      setLoading(false);\n    }\n  }, [kind, sync]);\n\n  return {\n    loadedData,\n    loading,\n    error,\n    sync,\n  };\n};\n","import React from 'react';\nimport { Icon, Popup } from 'semantic-ui-react';\n\nconst SyncIcon = ({\n  loading,\n  sync,\n  lastFetched,\n}) => {\n  const syncIcon = (\n    <Icon\n      link\n      name=\"sync\"\n      size=\"small\"\n      loading={loading}\n      onClick={sync}\n    />\n  );\n  return (\n    <>\n      {lastFetched ? (\n        <Popup\n          trigger={syncIcon}\n          content={`Last fetched on ${new Date(lastFetched).toLocaleString()}`}\n          size=\"small\"\n          wide\n          position=\"bottom center\"\n        />\n      ) : (\n        syncIcon\n      )}\n    </>\n  );\n};\n\nexport default SyncIcon;\n","import React from 'react';\nimport { Button, Message } from 'semantic-ui-react';\nimport { signIn } from '../wca/api';\n\nconst LoadingError = ({ error }) => (\n  <Message negative>\n    Something wrong happened when loading the data:\n    <pre>\n      {error}\n    </pre>\n    Your authentification token may have expired, you can try to\n    {' '}\n    <Button primary compact size=\"tiny\" onClick={signIn} content=\"sign in\" />\n    {' '}\n    again.\n    <br />\n    If the issue persists, it most likely means the WCA website is unreachable.\n    or the WCA website is unreachable.\n  </Message>\n);\n\nexport default LoadingError;\n","import React from 'react';\nimport { Dimmer, Placeholder, Loader } from 'semantic-ui-react';\n\nconst LoadingPlaceholder = () => (\n  <>\n    <Dimmer active inverted>\n      <Loader active inverted />\n    </Dimmer>\n    <Placeholder>\n      <Placeholder.Line />\n      <Placeholder.Line />\n    </Placeholder>\n  </>\n);\n\nexport default LoadingPlaceholder;\n","import React from 'react';\nimport { Link } from '@reach/router';\nimport {\n  Menu, Header, Segment,\n} from 'semantic-ui-react';\nimport cn from 'classnames';\n\nimport { competitionsUrl } from '../wca/routes';\nimport { usePersistence } from '../wca/persistence';\nimport SyncIcon from './SyncIcon';\nimport LoadingError from '../UtilsComponents/LoadingError';\nimport LoadingPlaceholder from '../UtilsComponents/LoadingPlaceholder';\nimport './IndexList.scss';\n\nconst Competitions = ({\n  competitions,\n}) => (\n  <Menu vertical fluid className=\"competitions-list\">\n    {competitions.map((comp) => (\n      <Link\n        key={comp.id}\n        to={comp.id}\n        className={cn('item', {\n          'not-announced': !comp.announced_at,\n        })}\n      >\n        {comp.name}\n      </Link>\n    ))}\n  </Menu>\n);\n\nconst manageByMeParams = new URLSearchParams({\n  managed_by_me: true,\n  // Last 12 months: months * days * hours * minByHour * secByMin * milli\n  start: new Date(Date.now() - 12 * 28 * 24 * 60 * 60 * 1000).toISOString(),\n});\n\nconst IndexList = () => {\n  const {\n    loadedData, loading, error, sync,\n  } = usePersistence(\n    'competitions.index', competitionsUrl(`?${manageByMeParams.toString()}`),\n  );\n  const { data, lastFetched } = loadedData;\n  return (\n    <>\n      <Header className=\"my-comps\">\n        My recent competitions\n        <SyncIcon\n          loading={loading}\n          sync={sync}\n          lastFetched={lastFetched}\n        />\n      </Header>\n      {error && (\n        <LoadingError error={error} />\n      )}\n      {loading && (\n        <Segment>\n          <LoadingPlaceholder />\n        </Segment>\n      )}\n      {!loading && data && (\n        <Competitions competitions={data} />\n      )}\n    </>\n  );\n};\n\nexport default IndexList;\n","import { asMap } from '@viroulep/group-simulator';\nimport Events from '../data/events';\n\nexport const parseActivityCode = (activityCode) => {\n  const [, e, r, g, a, o] = activityCode.match(\n    /^(\\w+)(?:-r(\\d+))?(?:-g(\\d+))?(?:-a(\\d+))?(?:-(\\w+))?$/,\n  );\n  return {\n    eventId: e === 'other' ? null : e,\n    roundNumber: r ? parseInt(r, 10) : null,\n    groupNumber: g ? parseInt(g, 10) : null,\n    attemptNumber: a ? parseInt(a, 10) : null,\n    otherActivity: o,\n  };\n};\n\nexport const activityCodeToName = (activityCode) => {\n  const {\n    eventId, roundNumber, groupNumber, attemptNumber,\n  } = parseActivityCode(activityCode);\n  return [\n    eventId && Events.byId[eventId].name,\n    roundNumber && `Round ${roundNumber}`,\n    groupNumber && `Group ${groupNumber}`,\n    attemptNumber && `Attempt ${attemptNumber}`,\n  ].filter((x) => x).join(', ');\n};\n\nexport const getRoundData = (events, activityCode) => {\n  // The activity code may contain a group or attempt, so we want to extract only\n  // the relevant part.\n  const { eventId, roundNumber } = parseActivityCode(activityCode);\n  const roundId = `${eventId}-r${roundNumber}`;\n  const event = events.find((e) => e.id === eventId);\n  return event ? event.rounds.find((r) => r.id === roundId) : null;\n};\n\nexport const localConfigFromActivity = (simulator, compWcif, activityCode) => {\n  // We'll just use the default config with no override!\n  const { cutoff, timeLimit } = getRoundData(compWcif.events, activityCode);\n  const configOverride = {};\n  if (timeLimit) {\n    // NOTE: cumulative time limit across events are not supported\n    // (and not planed to be).\n    const { centiseconds } = timeLimit;\n    configOverride.time_limit = Math.floor(centiseconds / 100);\n  }\n  if (cutoff) {\n    // Because we only simulate timed event, we can safely assume the attemptResult\n    // is a value representing centiseconds!\n    const { attemptResult } = cutoff;\n    configOverride.cutoff = Math.floor(attemptResult / 100);\n  }\n  return asMap(simulator.MapStringInt, configOverride)\n};\n","import React, { useState, useEffect } from 'react';\nimport {\n  Button, Header, Icon,\n} from 'semantic-ui-react';\nimport { asVector } from '@viroulep/group-simulator';\n\nimport { parseActivityCode, localConfigFromActivity } from '../wca/wcif';\nimport { timeToString } from '../utils';\n\nconst computeBestConfig = (\n  activity,\n  compWcif,\n  maxStaff,\n  maxStations,\n  times,\n  selectedModel,\n  setBestConfig,\n  setError,\n  simulator,\n) => {\n  if (times.length === 0) {\n    setBestConfig(null);\n    return;\n  }\n  const { activityCode } = activity;\n  const { eventId } = parseActivityCode(activityCode);\n  const timesVec = asVector(simulator.VectorTime, times);\n  const configOverride = localConfigFromActivity(simulator, compWcif, activityCode);\n  const bestConfig = simulator.optimizeStaff(\n    eventId, timesVec, maxStations, maxStaff, configOverride, selectedModel,\n  );\n  if (bestConfig.Err !== simulator.ErrorKind.SUCCESS) {\n    setError(\n      `An error occurred during the simulation: ${simulator.errorMessage(bestConfig.Err)}`,\n    );\n  } else {\n    setBestConfig(bestConfig);\n  }\n};\n\n\nconst BestConfigSection = ({\n  activity,\n  compWcif,\n  maxStaff,\n  maxStations,\n  times,\n  selectedModel,\n  simulator,\n}) => {\n  const [bestConfig, setBestConfig] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const compute = () => {\n    setLoading(true);\n    computeBestConfig(\n      activity,\n      compWcif,\n      maxStaff,\n      maxStations,\n      times,\n      selectedModel,\n      setBestConfig,\n      setError,\n      simulator,\n    );\n    setLoading(false);\n  }\n\n  useEffect(() => setBestConfig(null), [\n    activity, compWcif, maxStaff, maxStations, times, selectedModel, simulator,\n  ]);\n\n  return (\n    <>\n      {error && (\n        <pre>\n          {error}\n        </pre>\n      )}\n      {!error && loading && (\n        <Icon name=\"spinner\" loading />\n      )}\n      {!error && !loading && bestConfig && (\n        <div>\n          <Header as=\"h5\" content=\"Best configuration found\" />\n          Time:\n          {' '}\n          {timeToString(bestConfig.BestResult)}\n          <br />\n          Judges:\n          {' '}\n          {bestConfig.Judges}\n          <br />\n          Scramblers:\n          {' '}\n          {bestConfig.Scramblers}\n          <br />\n          Runners:\n          {' '}\n          {bestConfig.Runners}\n        </div>\n      )}\n      {!error && !loading && !bestConfig && (\n        <Button\n          circular\n          compact\n          icon=\"calculator\"\n          onClick={compute}\n        />\n      )}\n    </>\n  );\n};\n\nexport default BestConfigSection;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Button, Divider, List, Header,\n} from 'semantic-ui-react';\nimport { asVector } from '@viroulep/group-simulator';\nimport _ from 'lodash';\n\nimport { parseActivityCode, getRoundData, localConfigFromActivity } from '../wca/wcif';\nimport { timeToString } from '../utils';\nimport GroupGenerator from '../GroupGeneration/ModalGenRandom';\nimport BestConfigSection from './BestConfigurationSection';\n\n\nconst competitorsToTimes = (competitors, pbMap, eventId) => {\n  let times = competitors.map((person) => pbMap[person][eventId]);\n  let noPb = 0;\n  times = times.filter((t) => {\n    if (t === undefined) {\n      noPb += 1;\n    }\n    return t !== undefined;\n  });\n  const worst = times[times.length - 1];\n  if (worst) {\n    for (let i = 0; i < noPb; i += 1) {\n      times.push(worst);\n    }\n  }\n  return times;\n};\n\nconst secondsForRange = (startTime, endTime) => Math.floor(\n  (new Date(endTime).getTime() - new Date(startTime).getTime()) / 1000,\n);\n\nconst openGroupButton = (size) => ({ onClick }) => (\n  <Button\n    size=\"tiny\"\n    compact\n    content={`Manage times (${size})`}\n    className=\"mb-2\"\n    onClick={onClick}\n  />\n);\n\nconst populateGroupWithTimes = (\n  activity, setTimes, compWcif, groupsById, pbMap,\n) => {\n  // This try to infer the group population\n  const { id, activityCode } = activity;\n  const { eventId, roundNumber, groupNumber } = parseActivityCode(activityCode);\n  // We are already done if any of the following is true:\n  //   - we don't have a real event (eg: registration)\n  //   - our indexes are not build yet (we need them!)\n  //   - we don't have a round number\n  if (!eventId\n    || _.isEmpty(groupsById)\n    || _.isEmpty(pbMap)\n    || !roundNumber) {\n    return;\n  }\n\n  // Easy case, it's first round, so we just get the group from the index!\n  if (roundNumber === 1) {\n    setTimes(competitorsToTimes(groupsById[id] || [], pbMap, eventId));\n    return\n  }\n\n  // Else we're at a subsequent round, we need to get data from previous round\n  // and from first round.\n  const previousRoundData = getRoundData(\n    compWcif.events, `${eventId}-r${roundNumber - 1}`,\n  );\n\n  // We're not guaranteed to run on a wellformed competition, we have to check\n  // the advancementCondition has been set.\n  const { advancementCondition } = previousRoundData;\n  if (!advancementCondition) {\n    return;\n  }\n\n  // Level holds the number of competitors that should be in *this* round.\n  const { type, level } = advancementCondition;\n  if (!type || !['ranking', 'percent'].includes(type)) {\n    return;\n  }\n\n  const currentRoundCode = `${eventId}-r${roundNumber}`;\n  let totalGroups = 0;\n  const groupsForFirstRound = [];\n  // Crawl the schedule for additional data\n  compWcif.schedule.venues.forEach((v) => {\n    v.rooms.forEach((r) => {\n      r.activities.forEach((a) => {\n        if (a.activityCode.startsWith(currentRoundCode)) {\n          totalGroups += a.childActivities.length;\n        } else if (a.activityCode.startsWith(`${eventId}-r1`)) {\n          groupsForFirstRound.push(...a.childActivities.map((ca) => ca.id));\n        }\n      });\n    });\n  });\n\n  // Map the group ids to an actual list of times!\n  // Sort them using lodash sort, because javascript array sorting has this\n  // dumb behavior of casting integer to string if the compareFunction is not\n  // provided.\n  const timesForFirstRound = _.sortBy(_.flatMap(\n    groupsForFirstRound,\n    (groupId) => competitorsToTimes(groupsById[groupId], pbMap, eventId),\n  ));\n\n  // Ranking is straightforward, otherwise compute the appropriate percentage.\n  const totalQualified = type === 'ranking'\n    ? level\n    : Math.floor((timesForFirstRound.length * level) / 100);\n\n  // totalGroups is not 0 because there is always us!\n  const baseGroupSize = Math.floor(totalQualified / totalGroups);\n\n  // This handles cases where the number of groups doesn't divide the number\n  // of qualified competitors.\n  const groupSize = groupNumber === totalGroups\n    ? (totalQualified - (totalGroups - 1) * baseGroupSize)\n    : baseGroupSize;\n  const baseIndex = (groupNumber - 1) * baseGroupSize;\n  // 'end' is excluded with slice, so we need to add 1\n  const endIndex = baseIndex + groupSize + 1;\n  const groupTimes = timesForFirstRound.slice(baseIndex, endIndex);\n  setTimes(groupTimes);\n};\n\nconst updateAccuracyArray = (\n  index, accuracyArray, setAccuracyArray, simulated, activity,\n) => {\n  if (simulated === undefined) {\n    return;\n  }\n  const { startTime, endTime } = activity;\n  const estimate = secondsForRange(startTime, endTime);\n  const absoluteDiff = Math.abs(simulated - estimate);\n  const relativeDiff = Math.round((absoluteDiff / estimate) * 100);\n  const newAcc = [\n    ...accuracyArray,\n  ];\n\n  // Consider we're accurate if we're within 10% of the estimated time, or\n  // if within 2 minutes.\n  newAcc[index] = (relativeDiff < 10 || absoluteDiff < 120);\n  if (!_.isEqual(accuracyArray, newAcc)) {\n    setAccuracyArray(newAcc);\n  }\n};\n\nconst computeSimulatedTime = (\n  times, simulator, activity, compWcif, setSimulated, setError, selectedModel,\n) => {\n  if (times.length === 0) {\n    setSimulated(null);\n    return;\n  }\n  const { activityCode } = activity;\n  const { eventId } = parseActivityCode(activityCode);\n  const timesVec = asVector(simulator.VectorTime, times);\n  const configOverride = localConfigFromActivity(simulator, compWcif, activityCode);\n\n  const { Err, Value } = simulator.simuGroup(\n    eventId, timesVec, configOverride, selectedModel,\n  );\n\n  if (Err !== simulator.ErrorKind.SUCCESS) {\n    setError(\n      `An error occurred during the simulation: ${simulator.errorMessage(Err)}`,\n    );\n  } else {\n    setSimulated(Value);\n  }\n};\n\nconst Group = ({\n  index,\n  simulator,\n  selectedModel,\n  activity,\n  pbMap,\n  groupsById,\n  accuracyArray,\n  setAccuracyArray,\n  compWcif,\n  maxStaff,\n  maxStations,\n}) => {\n  const [error, setError] = useState(null);\n  const [simulated, setSimulated] = useState(null);\n  const [times, setTimes] = useState([]);\n  const {\n    name, startTime, endTime,\n  } = activity;\n\n  useEffect(() => {\n    computeSimulatedTime(\n      times, simulator, activity, compWcif, setSimulated, setError, selectedModel,\n    );\n  }, [times, simulator, activity, compWcif, setSimulated, setError, selectedModel]);\n\n  useEffect(() => {\n    updateAccuracyArray(\n      index, accuracyArray, setAccuracyArray, simulated, activity,\n    );\n  }, [index, accuracyArray, setAccuracyArray, simulated, activity]);\n\n  useEffect(() => {\n    if (times.length === 0) {\n      populateGroupWithTimes(\n        activity, setTimes, compWcif, groupsById, pbMap,\n      );\n    }\n  }, [times.length, activity, setTimes, compWcif, groupsById, pbMap]);\n\n  return (\n    <List.Item>\n      <Divider horizontal>\n        <Header as=\"h4\">\n          {name}\n        </Header>\n      </Divider>\n      <p>\n        Scheduled for\n        {' '}\n        {timeToString(secondsForRange(startTime, endTime))}\n        .\n      </p>\n      <Header as=\"h5\" content=\"Simulation\" className=\"mb-2\" />\n      <GroupGenerator\n        times={times}\n        setTimes={setTimes}\n        OpenButton={openGroupButton(times.length)}\n        headerContent={`Times for ${name}`}\n      />\n      <p>\n        {error && (\n          <>{error}</>\n        )}\n        {!error && simulated && (\n          <>\n            Simulation took\n            {timeToString(simulated)}\n            .\n          </>\n        )}\n        {!error && !simulated && (\n          <>No simulation result yet</>\n        )}\n      </p>\n      <BestConfigSection\n        activity={activity}\n        compWcif={compWcif}\n        maxStaff={maxStaff}\n        maxStations={maxStations}\n        times={times}\n        selectedModel={selectedModel}\n        simulator={simulator}\n      />\n    </List.Item>\n  );\n};\n\nexport default Group;\n","import React from 'react';\nimport { Icon } from 'semantic-ui-react';\n\nimport '../wca/cubing-icons.css';\nimport './EventIcon.scss';\n\n/* eslint-disable react/jsx-props-no-spreading */\nconst EventIcon = ({\n  id,\n  ...props\n}) => (\n  <Icon className={`cubing-icon event-${id}`} {...props} />\n);\n\nexport default EventIcon;\n","import React, { useState } from 'react';\nimport {\n  List, Header, Grid, Segment,\n} from 'semantic-ui-react';\nimport _ from 'lodash';\nimport { parseActivityCode } from '../wca/wcif';\nimport Group from './Group';\nimport EventIcon from '../UtilsComponents/EventIcon';\n\n\nconst Round = ({\n  simulator,\n  selectedModel,\n  compWcif,\n  activity,\n  pbMap,\n  groupsById,\n  maxStaff,\n  maxStations,\n}) => {\n  const { activityCode, name, childActivities } = activity;\n  const { eventId } = parseActivityCode(activityCode);\n  const [accuracyArray, setAccuracyArray] = useState(\n    childActivities.map(() => undefined),\n  );\n  let color = 'black';\n  if (accuracyArray.every((a) => a)) {\n    color = 'green';\n  } else if (accuracyArray.some((a) => a !== undefined)) {\n    color = 'orange';\n  }\n\n  return (\n    <Grid.Column key={activity.id}>\n      <Segment color={color}>\n        <Header as=\"h3\">\n          {eventId && (\n            <EventIcon id={eventId} />\n          )}\n          <Header.Content>\n            {name}\n          </Header.Content>\n        </Header>\n        <List relaxed>\n          {_.sortBy(childActivities, ['startTime']).map((ca, index) => (\n            <Group\n              index={index}\n              key={ca.id}\n              activity={ca}\n              color={color}\n              accuracyArray={accuracyArray}\n              setAccuracyArray={setAccuracyArray}\n              compWcif={compWcif}\n              pbMap={pbMap}\n              groupsById={groupsById}\n              simulator={simulator}\n              selectedModel={selectedModel}\n              maxStaff={maxStaff}\n              maxStations={maxStations}\n            />\n          ))}\n        </List>\n      </Segment>\n    </Grid.Column>\n  );\n};\n\nexport default Round;\n","import React, {\n  Fragment, useState, useEffect,\n} from 'react';\nimport {\n  Divider, Dropdown, Form, Grid, Header, Icon, Checkbox, Segment,\n} from 'semantic-ui-react';\nimport _ from 'lodash';\nimport { SettingsDescription } from '@viroulep/group-simulator';\n\nimport { parseActivityCode } from '../wca/wcif';\nimport { loadStoredConfig } from '../utils';\nimport { defaultModel } from '../data/simu';\nimport ModelPicker from '../Pickers/Model';\nimport Round from './Round';\nimport Events from '../data/events';\n\nconst buildIndex = (wcif, setPbMap, setGroupMap) => {\n  const pbMap = {\n  };\n  const groupsById = {\n  };\n\n  wcif.persons.forEach((p) => {\n    if (!p.registrantId) {\n      return;\n    }\n    const pbs = {};\n    p.personalBests.forEach((pb) => { pbs[pb.eventId] = Math.floor(pb.best / 100); });\n    pbMap[p.registrantId] = pbs;\n    p.assignments.forEach((a) => {\n      if (a.assignmentCode === 'competitor') {\n        if (!groupsById[a.activityId]) {\n          groupsById[a.activityId] = [];\n        }\n        groupsById[a.activityId].push(p.registrantId);\n      }\n    });\n  });\n\n  setPbMap(pbMap);\n  setGroupMap(groupsById);\n};\n\nconst formatDate = (d) => `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`;\n\nconst getAllActivities = (schedule, roomId, onlySimulated) => {\n  // Return all activities for given room\n  const room = _.flatMap(\n    schedule.venues,\n    (venue) => venue.rooms,\n  ).find((r) => r.id === roomId);\n  if (!room) {\n    return [];\n  }\n  const sortedActivities = _.sortBy(room.activities.filter(\n    (a) => !onlySimulated\n    || Events.simulatedId.includes(parseActivityCode(a.activityCode).eventId),\n  ), ['startTime']);\n  return _.groupBy(sortedActivities, (a) => formatDate(new Date(a.startTime)));\n};\n\nconst settingsToDisplay = [\n  'judges', 'scramblers', 'runners', 'extra_rate', 'miscramble_rate',\n];\n\n/* eslint-disable jsx-a11y/label-has-associated-control */\nconst SettingsInfo = ({\n  setupSettings,\n  selectedModel,\n  setSelectedModel,\n  maxStaff,\n  setMaxStaff,\n}) => (\n  <Segment color=\"teal\">\n    <Header as=\"h2\">\n      Settings\n    </Header>\n    <p>\n      You can adjust them in the &quot;settings&quot; section,\n      except for the system used that you can select below.\n    </p>\n    <Form>\n      <Grid columns={3} className=\"mb-2\">\n        <Grid.Row>\n          {settingsToDisplay.map((s) => (\n            <Grid.Column key={s}>\n              <Form.Field inline>\n                <label>{SettingsDescription.setup[s].text}</label>\n                :\n                {' '}\n                {setupSettings[s]}\n              </Form.Field>\n            </Grid.Column>\n          ))}\n        </Grid.Row>\n      </Grid>\n      <div>\n        <Form.Input\n          inline\n          label=\"Max number of staff for each group:\"\n          type=\"number\"\n          min={3}\n          size=\"small\"\n          value={maxStaff}\n          onChange={(e) => setMaxStaff(\n            parseInt(e.target.value, 10) || 0,\n          )}\n        />\n      </div>\n      <div>\n        I want to use the\n        {' '}\n        <ModelPicker model={selectedModel} setModel={setSelectedModel} inline />\n        {' '}\n        system.\n      </div>\n      <p>\n        Click on\n        {' '}\n        <Icon name=\"calculator\" />\n        {' '}\n        to compute the shortest time to run the group, and to display which\n        staff assignments were used.\n      </p>\n    </Form>\n  </Segment>\n);\nconst Competition = ({\n  simulator,\n  compWcif,\n}) => {\n  const { schedule } = compWcif;\n  const [pbMap, setPbMap] = useState({});\n  const [groupsById, setGroups] = useState({});\n  const [onlySimulated, setOnlySimulated] = useState(true);\n\n  // Local setup stuff\n  const { mapSetup } = loadStoredConfig(simulator);\n  const [selectedModel, setSelectedModel] = useState(defaultModel);\n  const [maxStaff, setMaxStaff] = useState(\n    mapSetup.judges + mapSetup.scramblers + mapSetup.runners,\n  );\n\n  const allRoomsOptions = _.flatMap(\n    schedule.venues,\n    (venue) => venue.rooms.map((r) => ({\n      key: r.id,\n      value: r.id,\n      text: `${r.name} in ${venue.name}`,\n    })),\n  )\n\n  // Selected room\n  const [room, setRoom] = useState(null);\n  const handleChangeRoom = (e, { value }) => setRoom(value);\n\n  const allActivities = getAllActivities(schedule, room, onlySimulated);\n\n  useEffect(() => {\n    buildIndex(compWcif, setPbMap, setGroups)\n    const defaultVenue = compWcif.schedule.venues[0];\n    if (defaultVenue) {\n      const defaultRoom = defaultVenue.rooms[0];\n      if (defaultRoom) {\n        setRoom(defaultRoom.id);\n      }\n    }\n  }, [compWcif]);\n\n  return (\n    <>\n      <Grid\n        columns={2}\n        stackable\n      >\n        <Grid.Column>\n          <Dropdown\n            onChange={handleChangeRoom}\n            options={allRoomsOptions}\n            value={room}\n            selection\n            className=\"mb-2\"\n          />\n          <p>\n            You can review the schedule for that room below.\n          </p>\n        </Grid.Column>\n        <Grid.Column>\n          <Checkbox\n            toggle\n            label=\"Show only event that can be simulated\"\n            checked={onlySimulated}\n            onChange={() => setOnlySimulated(!onlySimulated)}\n          />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <SettingsInfo\n            setupSettings={mapSetup}\n            selectedModel={selectedModel}\n            setSelectedModel={setSelectedModel}\n            maxStaff={maxStaff}\n            setMaxStaff={setMaxStaff}\n          />\n        </Grid.Column>\n      </Grid>\n      {_.map(allActivities, (v, k) => (\n        <Fragment key={k}>\n          <Divider horizontal>\n            <Header as=\"h2\">\n              {new Date(k).toDateString()}\n            </Header>\n          </Divider>\n          <Grid columns={3} stackable>\n            {_.sortBy(v, ['startTime']).map((activity) => (\n              <Round\n                key={activity.id}\n                activity={activity}\n                compWcif={compWcif}\n                pbMap={pbMap}\n                groupsById={groupsById}\n                simulator={simulator}\n                selectedModel={selectedModel}\n                maxStaff={maxStaff}\n                maxStations={mapSetup.judges}\n              />\n            ))}\n          </Grid>\n        </Fragment>\n      ))}\n    </>\n  )\n};\n\nexport default Competition;\n","import React from 'react';\nimport { Header, Segment } from 'semantic-ui-react';\n\nimport { usePersistence } from '../wca/persistence';\nimport { competitionWcifUrl } from '../wca/routes';\nimport Competition from './Competition';\nimport SyncIcon from './SyncIcon';\nimport LoadingError from '../UtilsComponents/LoadingError';\nimport LoadingPlaceholder from '../UtilsComponents/LoadingPlaceholder';\n\nconst RemoteCompetition = ({\n  competitionId,\n  simulator,\n}) => {\n  const {\n    loadedData, loading, error, sync,\n  } = usePersistence(\n    `competitions.${competitionId}`,\n    competitionWcifUrl(competitionId),\n  );\n  const { data, lastFetched } = loadedData;\n  return (\n    <>\n      <Header as=\"h1\" className=\"my-comps\">\n        {data ? (\n          data.name\n        ) : (\n          competitionId\n        )}\n        <SyncIcon\n          loading={loading}\n          sync={sync}\n          lastFetched={lastFetched}\n        />\n      </Header>\n      {error && (\n        <LoadingError error={error} />\n      )}\n      {loading && (\n        <Segment>\n          <LoadingPlaceholder />\n        </Segment>\n      )}\n      {!loading && data && (\n        <Competition compWcif={data} simulator={simulator} />\n      )}\n    </>\n  );\n};\n\nexport default RemoteCompetition;\n","import React, { useState, useRef } from 'react';\nimport { Header, Button, Icon } from 'semantic-ui-react';\nimport ls from 'local-storage';\n\nimport LoadingError from '../UtilsComponents/LoadingError';\nimport Competition from './Competition';\nimport './LocalCompetition.scss';\n\nconst loadWcif = (event, fileInput, setWcif, setError) => {\n  setError(null);\n  setWcif(null);\n  const reader = new FileReader();\n  reader.onload = (e) => {\n    try {\n      const wcif = JSON.parse(e.target.result);\n      setWcif(wcif);\n      ls('local-wcif', wcif);\n    } catch (error) {\n      setError(error.message);\n    }\n    // Clear the input so that we can re-upload the same file!\n    /* eslint-disable no-param-reassign */\n    fileInput.current.value = ''\n  };\n  reader.onerror = (e) => setError(`Couldn't load the JSON file (${e})`);\n  reader.readAsText(event.target.files[0]);\n};\n\nconst LocalCompetition = ({\n  simulator,\n}) => {\n  const [error, setError] = useState(null);\n  const [wcif, setWcif] = useState(ls('local-wcif'));\n  const fileInput = useRef(null);\n  return (\n    <>\n      <input\n        type=\"file\"\n        ref={fileInput}\n        accept=\".json\"\n        style={{ display: 'none' }}\n        onChange={(ev) => loadWcif(ev, fileInput, setWcif, setError)}\n      />\n      <Header as=\"h1\">\n        Check schedule from WCIF\n        <span className=\"mr-2\" />\n        <Button\n          icon\n          className=\"upload-wcif\"\n          compact\n          size=\"tiny\"\n          labelPosition=\"right\"\n          onClick={() => fileInput.current.click()}\n        >\n          <Icon name=\"upload\" />\n          Upload WCIF\n        </Button>\n      </Header>\n      {error && (\n        <LoadingError error={error} />\n      )}\n      {wcif && (\n        <>\n          <Header as=\"h2\">\n            {wcif.name}\n          </Header>\n          <Competition simulator={simulator} compWcif={wcif} />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default LocalCompetition;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Button, Container, Message, Icon,\n} from 'semantic-ui-react';\nimport { getSimu } from '@viroulep/group-simulator';\nimport { Router } from '@reach/router';\nimport ls from 'local-storage';\n\nimport './App.scss';\nimport Navigation from './Navigation/Navigation';\nimport Settings from './Settings/Settings';\nimport QuickRunPage from './Simulation/QuickRun';\nimport { loadStoredConfig } from './utils';\nimport {\n  usePersistence,\n  clearForNewUser,\n  setRemoteIfNeeded,\n} from './wca/persistence';\nimport { isStaging, selfUrl } from './wca/routes';\nimport CompetitionsList from './Competitions/IndexList';\nimport Competition from './Competitions/RemoteCompetition';\nimport CompetitionFromWcif from './Competitions/LocalCompetition';\n\nconst LoadingMessage = () => (\n  <>\n    <Message.Header>Loading required content</Message.Header>\n    Please wait while the page is loading a required module.\n  </>\n);\n\nconst FailureMessage = () => (\n  <>\n    <p>\n      The loading of the module timed out.\n      It&pos;s likely that there was an error and that your browser does not support WebAssembly.\n    </p>\n\n    <p>\n      This module is necessary for this application, it is pointless to show\n      you anything more than this error message at this point.\n      <br />\n      Feel free to check this website to make sure your browser is supported.\n    </p>\n    <Button\n      href=\"https://caniuse.com/#feat=wasm\"\n      target=\"_blank\"\n      secondary\n    >\n      Check browser compatibility\n    </Button>\n  </>\n);\n\n// Use dismissable with wasm: info loading, green loaded, red timeout!\nconst LoadingWasm = ({\n  simulator,\n  loading,\n}) => (\n  <>\n    {!simulator && (\n      <Message\n        icon\n        color={loading ? 'teal' : 'red'}\n      >\n        {loading && (\n          <Icon name=\"circle notched\" loading />\n        )}\n        <Message.Content>\n          {loading ? (\n            <LoadingMessage />\n          ) : (\n            <FailureMessage />\n          )}\n        </Message.Content>\n      </Message>\n    )}\n  </>\n);\n\nconst Home = () => (\n  <div>\n    This page is a work in progress and most likely won&apos;t do what you expect.\n    <br />\n    You should not use it.\n    <br />\n    Come back later.\n  </div>\n);\n\nconst NotFound = () => <p>Oups, it&apos;s a 404</p>;\n\nconst Competitions = ({ children }) => <>{children}</>;\n\nfunction App() {\n  const [simulator, setSimulator] = useState(undefined);\n  const [simuLoading, setSimuLoading] = useState(true);\n\n  // This is important in case we happen signing in someone new.\n  const storedUser = ls('currentUser');\n  const storedData = storedUser ? storedUser.data : null;\n  const storedMe = storedData ? storedData.me : null;\n\n  const { loadedData, loading } = usePersistence(\n    'currentUser',\n    selfUrl(),\n  );\n\n  // This holds the actual currentUser data\n  const { data } = loadedData;\n  const currentUser = data ? data.me : null;\n\n  if (storedUser && currentUser && (storedMe.id !== currentUser.id)) {\n    clearForNewUser();\n  }\n\n  const loadWasm = async () => {\n    const wasm = getSimu(() => { setSimulator(wasm); setSimuLoading(false) });\n  };\n\n  // Pass '[]' as a dependency, so that it's ran just once.\n  useEffect(() => {\n    loadWasm();\n    setRemoteIfNeeded();\n    // Register a timeout on the loading process\n    setTimeout(() => setSimuLoading(false), 3000);\n  }, []);\n\n  useEffect(() => { loadStoredConfig(simulator); }, [simulator]);\n\n  return (\n    <Container>\n      <LoadingWasm simulator={simulator} loading={simuLoading} />\n      {simulator && (\n        <>\n          <Navigation\n            user={currentUser}\n            userLoading={loading}\n          />\n          {isStaging() && (\n            <Message size=\"small\" color=\"pink\">\n              You&apos;re not currently using the WCA&apos;s production data.\n            </Message>\n          )}\n          <Router basepath={process.env.PUBLIC_URL}>\n            <Home path=\"/\" />\n            <Settings simulator={simulator} path=\"settings/*\" />\n            <QuickRunPage simulator={simulator} path=\"/quick-simu\" />\n            <CompetitionFromWcif simulator={simulator} path=\"/from-wcif\" />\n            {!loading && currentUser && (\n              <Competitions path=\"competitions\">\n                <CompetitionsList path=\"/\" />\n                <Competition path=\":competitionId\" simulator={simulator} />\n              </Competitions>\n            )}\n            <NotFound default />\n          </Router>\n        </>\n      )}\n    </Container>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { getOauthTokenIfAny } from './wca/persistence';\nimport * as serviceWorker from './serviceWorker';\nimport 'fomantic-ui-css/semantic.css';\n\ngetOauthTokenIfAny();\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}